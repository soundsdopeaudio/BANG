#include "PianoRollComponent.h"

void PianoRollComponent::setChords(const std::vector<Chord>& chords)
{
    currentChords = chords;
    currentMelody.clear();
    currentMixture.clear();
    repaint();
}

void PianoRollComponent::setMelody(const std::vector<Note>& melody)
{
    currentMelody = melody;
    currentChords.clear();
    currentMixture.clear();
    repaint();
}

void PianoRollComponent::setMixture(const std::vector<MidiEvent>& mixture)
{
    currentMixture = mixture;
    currentChords.clear();
    currentMelody.clear();
    repaint();
}

void PianoRollComponent::clearChords()
{
    currentChords.clear();
    repaint();
}

void PianoRollComponent::clearMelody()
{
    currentMelody.clear();
    repaint();
}

void PianoRollComponent::paint(juce::Graphics& g)
{
    g.fillAll(juce::Colours::black);

    drawPianoKeys(g);
    drawGrid(g);

    for (const auto& chord : currentChords)
        drawChordBlock(g, chord);

    for (const auto& note : currentMelody)
        drawNoteBlock(g, note);

    for (const auto& event : currentMixture)
        drawMidiEventBlock(g, event);
}

void PianoRollComponent::drawPianoKeys(juce::Graphics& g)
{
    // Basic white keys example (C to B, octave 4)
    int keyWidth = getWidth() / 12;
    int keyHeight = 40;

    for (int i = 0; i < 12; ++i)
    {
        juce::Rectangle<int> keyRect(i * keyWidth, getHeight() - keyHeight, keyWidth, keyHeight);
        g.setColour(juce::Colours::white);
        g.fillRect(keyRect);
        g.setColour(juce::Colours::black);
        g.drawRect(keyRect);
    }
}

void PianoRollComponent::drawGrid(juce::Graphics& g)
{
    // Draw vertical beat lines for 4 bars, 4 beats per bar
    int beatsPerBar = 4;
    int totalBars = 4;
    int width = getWidth();
    int height = getHeight() - 40;

    for (int bar = 0; bar <= totalBars; ++bar)
    {
        int x = bar * (width / totalBars);
        g.setColour(juce::Colours::grey);
        g.drawLine(x, 0, x, height, 2.0f);
    }

    for (int beat = 1; beat < totalBars * beatsPerBar; ++beat)
    {
        int x = (beat * width) / (totalBars * beatsPerBar);
        g.setColour(juce::Colours::darkgrey);
        g.drawLine(x, 0, x, height, 1.0f);
    }
}

void PianoRollComponent::drawChordBlock(juce::Graphics& g, const Chord& chord)
{
    // Draw a green rectangle representing chord position and length
    int width = getWidth() / 4; // 4 bars total
    int height = 20;

    int x = (chord.bar - 1) * width;
    int y = getHeight() - 40 - (chord.rootNote - 48) * 5; // rootNote mapped vertically (assuming 48 = C3)

    juce::Rectangle<int> rect(x, y, width, height);
    g.setColour(juce::Colours::green);
    g.fillRect(rect);
    g.setColour(juce::Colours::black);
    g.drawRect(rect);
}

void PianoRollComponent::drawNoteBlock(juce::Graphics& g, const Note& note)
{
    int width = getWidth() / 16; // quarter notes over 4 bars
    int height = 10;

    int x = ((note.bar - 1) * 4 + (note.beat - 1)) * width;
    int y = getHeight() - 40 - (note.pitch - 48) * 5;

    juce::Rectangle<int> rect(x, y, width * note.length, height);
    g.setColour(juce::Colours::yellow);
    g.fillRect(rect);
    g.setColour(juce::Colours::black);
    g.drawRect(rect);
}

void PianoRollComponent::drawMidiEventBlock(juce::Graphics& g, const MidiEvent& event)
{
    if (event.isChord)
    {
        int width = getWidth() / 4; // 4 bars total
        int height = 20;

        int x = (event.bar - 1) * width;
        int y = getHeight() - 40 - (event.rootNote - 48) * 5;

        juce::Rectangle<int> rect(x, y, width, height);
        g.setColour(juce::Colours::cyan);
        g.fillRect(rect);
        g.setColour(juce::Colours::black);
        g.drawRect(rect);
    }
    else
    {
        int width = getWidth() / 16; // quarter notes over 4 bars
        int height = 10;

        int x = ((event.bar - 1) * 4 + (event.beat - 1)) * width;
        int y = getHeight() - 40 - (event.pitch - 48) * 5;

        juce::Rectangle<int> rect(x, y, width * event.length, height);
        g.setColour(juce::Colours::orange);
        g.fillRect(rect);
        g.setColour(juce::Colours::black);
        g.drawRect(rect);
    }
}
